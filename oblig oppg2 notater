oppgave 2

Code Generated #1: Basic Blackjack Game

import random

def create_deck():
    deck = []
    for value in range(2, 11):
        deck.extend([value] * 4)  # 4 of each number card
    deck.extend([10] * 12)  # 4 Jacks, 4 Queens, 4 Kings
    deck.extend([1, 11])  # 4 Aces
    random.shuffle(deck)
    return deck

def calculate_hand_value(hand):
    value = sum(hand)
    aces = hand.count(11)
    while value > 21 and aces:
        value -= 10
        aces -= 1
    return value

def blackjack():
    deck = create_deck()
    player_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]

    print(f"Your hand: {player_hand}, value: {calculate_hand_value(player_hand)}")
    print(f"Dealer's visible card: {dealer_hand[0]}")

    if calculate_hand_value(player_hand) == 21:
        return "Blackjack! You win 2x your bet!"

    while True:
        action = input("Do you want to Hit or Stand? ").strip().lower()
        if action == 'hit':
            player_hand.append(deck.pop())
            print(f"Your hand: {player_hand}, value: {calculate_hand_value(player_hand)}")
            if calculate_hand_value(player_hand) > 21:
                return "Bust! Dealer wins."
        elif action == 'stand':
            break

    while calculate_hand_value(dealer_hand) < 17:
        dealer_hand.append(deck.pop())

    print(f"Dealer's hand: {dealer_hand}, value: {calculate_hand_value(dealer_hand)}")
    if calculate_hand_value(dealer_hand) > 21:
        return "Dealer busts! You win!"
    elif calculate_hand_value(player_hand) > calculate_hand_value(dealer_hand):
        return "You win!"
    elif calculate_hand_value(player_hand) < calculate_hand_value(dealer_hand):
        return "Dealer wins."
    else:
        return "It's a tie."

print(blackjack())


Code Generated #2: Blackjack with Betting System

import random

def create_deck():
    deck = []
    for value in range(2, 11):
        deck.extend([value] * 4)
    deck.extend([10] * 12)
    deck.extend([1, 11])
    random.shuffle(deck)
    return deck

def calculate_hand_value(hand):
    value = sum(hand)
    aces = hand.count(11)
    while value > 21 and aces:
        value -= 10
        aces -= 1
    return value

def blackjack():
    chips = 100
    while chips > 0:
        print(f"You have {chips} chips.")
        bet = int(input("Enter your bet: "))
        if bet > chips or bet <= 0:
            print("Invalid bet. Try again.")
            continue

        deck = create_deck()
        player_hand = [deck.pop(), deck.pop()]
        dealer_hand = [deck.pop(), deck.pop()]

        print(f"Your hand: {player_hand}, value: {calculate_hand_value(player_hand)}")
        print(f"Dealer's visible card: {dealer_hand[0]}")

        if calculate_hand_value(player_hand) == 21:
            chips += bet
            print("Blackjack! You win 2x your bet!")
            continue

        while True:
            action = input("Do you want to Hit or Stand? ").strip().lower()
            if action == 'hit':
                player_hand.append(deck.pop())
                print(f"Your hand: {player_hand}, value: {calculate_hand_value(player_hand)}")
                if calculate_hand_value(player_hand) > 21:
                    chips -= bet
                    print("Bust! Dealer wins.")
                    break
            elif action == 'stand':
                break

        while calculate_hand_value(dealer_hand) < 17:
            dealer_hand.append(deck.pop())

        print(f"Dealer's hand: {dealer_hand}, value: {calculate_hand_value(dealer_hand)}")
        if calculate_hand_value(dealer_hand) > 21:
            chips += bet
            print("Dealer busts! You win!")
        elif calculate_hand_value(player_hand) > calculate_hand_value(dealer_hand):
            chips += bet
            print("You win!")
        elif calculate_hand_value(player_hand) < calculate_hand_value(dealer_hand):
            chips -= bet
            print("Dealer wins.")
        else:
            print("It's a tie.")

    print("You are out of chips!")

blackjack()


Code Generated #1: Basic Blackjack Game

import random

def create_deck():
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    ranks = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace']
    deck = [(rank, suit) for suit in suits for rank in ranks]
    random.shuffle(deck)
    return deck

def card_value(card):
    rank = card[0]
    if rank in ['Jack', 'Queen', 'King']:
        return 10
    elif rank == 'Ace':
        return 11  # Ace can also be 1, but we'll handle that later
    else:
        return int(rank) if rank != 'Ten' else 10

def calculate_hand_value(hand):
    value = sum(card_value(card) for card in hand)
    # Adjust for Aces
    aces = sum(1 for card in hand if card[0] == 'Ace')
    while value > 21 and aces:
        value -= 10
        aces -= 1
    return value

def display_hand(hand, title):
    cards = ', '.join(f"{rank} of {suit}" for rank, suit in hand)
    print(f"{title}: {cards}")

def blackjack_game():
    chips = 7
    while True:
        bet = int(input(f"You currently have {chips} chips. How many do you bet?: "))
        print(f"You bet {bet} chips out of your {chips} total.\n")

        deck = create_deck()
        player_hand = [deck.pop(), deck.pop()]
        dealer_hand = [deck.pop(), deck.pop()]

        display_hand(player_hand, "Your hand")
        display_hand([dealer_hand[0]], "Dealer's visible card")

        while True:
            player_value = calculate_hand_value(player_hand)
            dealer_value = calculate_hand_value(dealer_hand)
            print(f"Your total value: {player_value}, Dealer's value: {dealer_value}")
            action = input("Do you wish to hit or stand? (1 - Hit, 2 - Stand): ")

            if action == '1':
                player_hand.append(deck.pop())
                display_hand(player_hand, "Your hand")
            else:
                break

        while dealer_value < 17:
            dealer_hand.append(deck.pop())
            dealer_value = calculate_hand_value(dealer_hand)

        display_hand(dealer_hand, "Dealer's hand")
        print(f"Final values - You: {player_value}, Dealer: {dealer_value}")

        if player_value > 21:
            print("You bust! You lose your bet.")
            chips -= bet
        elif dealer_value > 21 or player_value > dealer_value:
            print("You win! You keep your chips.")
        elif player_value < dealer_value:
            print("Dealer wins! You lose your bet.")
            chips -= bet
        else:
            print("It's a tie! You keep your chips.")

        if chips <= 0:
            print("You're out of chips! Game over.")
            break

        play_again = input("Do you wish to play again? (y - Yes, n - No): ")
        if play_again.lower() != 'y':
            print("See you next time! :)")
            break

if __name__ == "__main__":
    blackjack_game()


Code Generated #2: Blackjack with Enhanced Features

import random

def create_deck():
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    ranks = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace']
    deck = [(rank, suit) for suit in suits for rank in ranks]
    random.shuffle(deck)
    return deck

def card_value(card):
    rank = card[0]
    if rank in ['Jack', 'Queen', 'King']:
        return 10
    elif rank == 'Ace':
        return 11
    else:
        return int(rank) if rank != 'Ten' else 10

def calculate_hand_value(hand):
    value = sum(card_value(card) for card in hand)
    aces = sum(1 for card in hand if card[0] == 'Ace')
    while value > 21 and aces:
        value -= 10
        aces -= 1
    return value

def display_hand(hand, title):
    cards = ', '.join(f"{rank} of {suit}" for rank, suit in hand)
    print(f"{title}: {cards}")

def blackjack_game():
    chips = 7
    while True:
        bet = int(input(f"You currently have {chips} chips. How many do you bet?: "))
        print(f"You bet {bet} chips out of your {chips} total.\n")

        deck = create_deck()
        player_hand = [deck.pop(), deck.pop()]
        dealer_hand = [deck.pop(), deck.pop()]

        display_hand(player_hand, "Your hand")
        display_hand([dealer_hand[0]], "Dealer's visible card")

        while True:
            player_value = calculate_hand_value(player_hand)
            dealer_value = calculate_hand_value(dealer_hand)
            print(f"Your total value: {player_value}, Dealer's value: {dealer_value}")
            action = input("Do you wish to hit or stand? (1 - Hit, 2 - Stand): ")

            if action == '1':
                player_hand.append(deck.pop())
                display_hand(player_hand, "Your hand")
            else:
                break

        while dealer_value < 17:
            dealer_hand.append(deck.pop())
            dealer_value = calculate_hand_value(dealer_hand)

        display_hand(dealer_hand, "Dealer's hand")
        print(f"Final values - You: {player_value}, Dealer: {dealer_value}")

        if player_value > 21:
            print("You bust! You lose your bet.")
            chips -= bet
        elif dealer_value > 21 or player_value > dealer_value:
            print("You win! You keep your chips.")
        elif player_value < dealer_value:
            print("Dealer wins! You lose your bet.")
            chips -= bet
        else:
            print("It's a tie! You keep your chips.")

        if chips <= 0:
            print("You're out of chips! Game over.")
            break

        play_again = input("Do you wish to play again? (y - Yes, n - No): ")
        if play_again.lower() != 'y':
            print("See you next time! :)")
            break

if __name__ == "__main__":
    blackjack_game()


Code Generated #3: Blackjack with Betting Logic


import random

def create_deck():
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    ranks = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace']
    deck = [(rank, suit) for suit in suits for rank in ranks]
    random.shuffle(deck)
    return deck

def card_value(card):
    rank = card[0]
    if rank in ['Jack', 'Queen', 'King']:
        return 10
    elif rank == 'Ace':
        return 11
    else:
        return int(rank) if rank != 'Ten' else 10

def calculate_hand_value(hand):
    value = sum(card_value(card) for card in hand)
    aces = sum(1 for card in hand if card[0] == 'Ace')
    while value > 21 and aces:
        value -= 10
        aces -= 1
    return value

def display_hand(hand, title):
    cards = ', '.join(f"{rank} of {suit}" for rank, suit in hand)
    print(f"{title}: {cards}")

def blackjack_game():
    chips = 7
    while True:
        bet = int(input(f"You currently have {chips} chips. How many do you bet?: "))
        if bet > chips:
            print("You cannot bet more chips than you have.")
            continue
        print(f"You bet {bet} chips out of your {chips} total.\n")

        deck = create_deck()
        player_hand = [deck.pop(), deck.pop()]
        dealer_hand = [deck.pop(), deck.pop()]

        display_hand(player_hand, "Your hand")
        display_hand([dealer_hand[0]], "Dealer's visible card")

        while True:
            player_value = calculate_hand_value(player_hand)
            dealer_value = calculate_hand_value(dealer_hand)
            print(f"Your total value: {player_value}, Dealer's value: {dealer_value}")
            action = input("Do you wish to hit or stand? (1 - Hit, 2 - Stand): ")

            if action == '1':
                player_hand.append(deck.pop())
                display_hand(player_hand, "Your hand")
            else:
                break

        while dealer_value < 17:
            dealer_hand.append(deck.pop())
            dealer_value = calculate_hand_value(dealer_hand)

        display_hand(dealer_hand, "Dealer's hand")
        print(f"Final values - You: {player_value}, Dealer: {dealer_value}")

        if player_value > 21:
            print("You bust! You lose your bet.")
            chips -= bet
        elif dealer_value > 21 or player_value > dealer_value:
            print("You win! You keep your chips.")
        elif player_value < dealer_value:
            print("Dealer wins! You lose your bet.")
            chips -= bet
        else:
            print("It's a tie! You keep your chips.")

        if chips <= 0:
            print("You're out of chips! Game over.")
            break

        play_again = input("Do you wish to play again? (y - Yes, n - No): ")
        if play_again.lower() != 'y':
            print("See you next time! :)")
            break

if __name__ == "__main__":
    blackjack_game()


This document outlines the implementation of a simple Blackjack game in Python. The game includes functionalities for shuffling a deck, dealing cards, calculating hand values, and managing player interactions. The game also incorporates betting mechanics and allows for multiple rounds of play.

import random

full_deck = {
    "Two of clubs": 2, "Three of clubs": 3, "Four of clubs": 4, "Five of clubs": 5,
    "Six of clubs": 6, "Seven of clubs": 7, "Eight of clubs": 8, "Nine of clubs": 9,
    "Ten of clubs": 10, "Jack of clubs": 10, "Queen of clubs": 10, "King of clubs": 10,
    "Ace of clubs": 11, "Two of diamonds": 2, "Three of diamonds": 3, "Four of diamonds": 4,
    "Five of diamonds": 5, "Six of diamonds": 6, "Seven of diamonds": 7, "Eight of diamonds": 8,
    "Nine of diamonds": 9, "Ten of diamonds": 10, "Jack of diamonds": 10, "Queen of diamonds": 10,
    "King of diamonds": 10, "Ace of diamonds": 11, "Two of hearts": 2, "Three of hearts": 3,
    "Four of hearts": 4, "Five of hearts": 5, "Six of hearts": 6, "Seven of hearts": 7,
    "Eight of hearts": 8, "Nine of hearts": 9, "Ten of hearts": 10, "Jack of hearts": 10,
    "Queen of hearts": 10, "King of hearts": 10, "Ace of hearts": 11, "Two of spades": 2,
    "Three of spades": 3, "Four of spades": 4, "Five of spades": 5, "Six of spades": 6,
    "Seven of spades": 7, "Eight of spades": 8, "Nine of spades": 9, "Ten of spades": 10,
    "Jack of spades": 10, "Queen of spades": 10, "King of spades": 10, "Ace of spades": 11,
}

def get_new_shuffled_deck():
    deck = list(full_deck.keys())
    random.shuffle(deck)
    return deck

def get_card_value(card):
    return full_deck[card]

def calculate_hand_value(hand):
    hand_value = sum(get_card_value(card) for card in hand)
    # Adjust for Aces
    aces = hand.count("Ace of clubs") + hand.count("Ace of diamonds") + hand.count("Ace of hearts") + hand.count("Ace of spades")
    while hand_value > 21 and aces:
        hand_value -= 10
        aces -= 1
    return hand_value

def deal_initial_cards(deck):
    player_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]
    return player_hand, dealer_hand

def print_result(player_value, dealer_value, chips, bet):
    if dealer_value > 21:
        print("Dealer busts! You win!")
        return chips + bet
    elif player_value > dealer_value:
        print("You win!")
        return chips + bet
    elif player_value < dealer_value:
        print("You lose!")
        return chips - bet
    else:
        print("It's a tie!")
        return chips

# Main game loop
def play_blackjack():
    chips = 5
    while chips > 0:
        deck = get_new_shuffled_deck()
        player_hand, dealer_hand = deal_initial_cards(deck)
        
        print(f"You have: {player_hand}, total value: {calculate_hand_value(player_hand)}")
        print(f"Dealer's visible card: {dealer_hand[0]}")

        if calculate_hand_value(player_hand) == 21:
            print("Blackjack! You win!")
            chips += 2  # Double the bet
            continue

        # Player's turn
        while True:
            choice = input("Choose: 1 - Hit, 2 - Stand: ")
            if choice == '1':
                player_hand.append(deck.pop())
                print(f"Your hand: {player_hand}, total value: {calculate_hand_value(player_hand)}")
                if calculate_hand_value(player_hand) > 21:
                    print("You bust! Dealer wins.")
                    chips -= 1
                    break
            elif choice == '2':
                break

        # Dealer's turn
        dealer_value = calculate_hand_value(dealer_hand)
        while dealer_value < 17:
            dealer_hand.append(deck.pop())
            dealer_value = calculate_hand_value(dealer_hand)

        print(f"Dealer's hand: {dealer_hand}, total value: {dealer_value}")
        chips = print_result(calculate_hand_value(player_hand), dealer_value, chips, 1)

        if chips <= 0:
            print("You have no chips left. Game over!")
            break
        else:
            print(f"You have {chips} chips left.")

play_blackjack()


Code Generated #2: Enhanced Blackjack with Betting

import random

full_deck = {
    # Same deck as above
}

def get_new_shuffled_deck():
    deck = list(full_deck.keys())
    random.shuffle(deck)
    return deck

def get_card_value(card):
    return full_deck[card]

def calculate_hand_value(hand):
    hand_value = sum(get_card_value(card) for card in hand)
    aces = hand.count("Ace of clubs") + hand.count("Ace of diamonds") + hand.count("Ace of hearts") + hand.count("Ace of spades")
    while hand_value > 21 and aces:
        hand_value -= 10
        aces -= 1
    return hand_value

def deal_initial_cards(deck):
    player_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]
    return player_hand, dealer_hand

def print_result(player_value, dealer_value, chips, bet):
    if dealer_value > 21:
        print("Dealer busts! You win!")
        return chips + bet
    elif player_value > dealer_value:
        print("You win!")
        return chips + bet
    elif player_value < dealer_value:
        print("You lose!")
        return chips - bet
    else:
        print("It's a tie!")
        return chips

def get_bet(chips):
    while True:
        try:
            bet = int(input(f"You have {chips} chips. Enter your bet: "))
            if 1 <= bet <= chips:
                return bet
            else:
                print("Invalid bet. Try again.")
        except ValueError:
            print("Please enter a valid number.")

def play_blackjack():
    chips = 5
    while chips > 0:
        deck = get_new_shuffled_deck()
        player_hand, dealer_hand = deal_initial_cards(deck)
        
        print(f"You have: {player_hand}, total value: {calculate_hand_value(player_hand)}")
        print(f"Dealer's visible card: {dealer_hand[0]}")

        bet = get_bet(chips)

        if calculate_hand_value(player_hand) == 21:
            print("Blackjack! You win!")
            chips += bet
            continue

        while True:
            choice = input("Choose: 1 - Hit, 2 - Stand: ")
            if choice == '1':
                player_hand.append(deck.pop())
                print(f"Your hand: {player_hand}, total value: {calculate_hand_value(player_hand)}")
                if calculate_hand_value(player_hand) > 21:
                    print("You bust! Dealer wins.")
                    chips -= bet
                    break
            elif choice == '2':
                break

        dealer_value = calculate_hand_value(dealer_hand)
        while dealer_value < 17:
            dealer_hand.append(deck.pop())
            dealer_value = calculate_hand_value(dealer_hand)

        print(f"Dealer's hand: {dealer_hand}, total value: {dealer_value}")
        chips = print_result(calculate_hand_value(player_hand), dealer_value, chips, bet)

        if chips <= 0:
            print("You have no chips left. Game over!")
            break
        else:
            print(f"You have {chips} chips left.")

play_blackjack()


Code Generated #3: Complete Blackjack with Multiple Rounds

import random

full_deck = {
    # Same deck as above
}

def get_new_shuffled_deck():
    deck = list(full_deck.keys())
    random.shuffle(deck)
    return deck

def get_card_value(card):
    return full_deck[card]

def calculate_hand_value(hand):
    hand_value = sum(get_card_value(card) for card in hand)
    aces = hand.count("Ace of clubs") + hand.count("Ace of diamonds") + hand.count("Ace of hearts") + hand.count("Ace of spades")
    while hand_value > 21 and aces:
        hand_value -= 10
        aces -= 1
    return hand_value

def deal_initial_cards(deck):
    player_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]
    return player_hand, dealer_hand

def print_result(player_value, dealer_value, chips, bet):
    if dealer_value > 21:
        print("Dealer busts! You win!")
        return chips + bet
    elif player_value > dealer_value:
        print("You win!")
        return chips + bet
    elif player_value < dealer_value:
        print("You lose!")
        return chips - bet
    else:
        print("It's a tie!")
        return chips

def get_bet(chips):
    while True:
        try:
            bet = int(input(f"You have {chips} chips. Enter your bet: "))
            if 1 <= bet <= chips:
                return bet
            else:
                print("Invalid bet. Try again.")
        except ValueError:
            print("Please enter a valid number.")

def play_blackjack():
    chips = 5
    while chips > 0:
        deck = get_new_shuffled_deck()
        player_hand, dealer_hand = deal_initial_cards(deck)
        
        print(f"You have: {player_hand}, total value: {calculate_hand_value(player_hand)}")
        print(f"Dealer's visible card: {dealer_hand[0]}")

        bet = get_bet(chips)

        if calculate_hand_value(player_hand) == 21:
            print("Blackjack! You win!")
            chips += bet
            continue

        while True:
            choice = input("Choose: 1 - Hit, 2 - Stand: ")
            if choice == '1':
                player_hand.append(deck.pop())
                print(f"Your hand: {player_hand}, total value: {calculate_hand_value(player_hand)}")
                if calculate_hand_value(player_hand) > 21:
                    print("You bust! Dealer wins.")
                    chips -= bet
                    break
            elif choice == '2':
                break

        dealer_value = calculate_hand_value(dealer_hand)
        while dealer_value < 17:
            dealer_hand.append(deck.pop())
            dealer_value = calculate_hand_value(dealer_hand)

        print(f"Dealer's hand: {dealer_hand}, total value: {dealer_value}")
        chips = print_result(calculate_hand_value(player_hand), dealer_value, chips, bet)

        if chips <= 0:
            print("You have no chips left. Game over!")
            break
        else:
            print(f"You have {chips} chips left.")

        if input("Play another round? (y/n): ").lower() != 'y':
            break

play_blackjack()
